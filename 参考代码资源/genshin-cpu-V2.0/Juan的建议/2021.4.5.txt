在代码方面，我认为这次的代码的抽象层次还不是很高，还有许多相关性很高的信号可以集成打包成为结构体。
大家由于写verilog的惯性，并不是很适应去更多的去使用结构体这样的抽象。（好的抽象能够减少代码量，增加可读性）
但是在宏定义这方面，我认为我们这次大规模的使用宏定义是很正确的，提高了可读性，在代码修改的时候也很方便。

不过针对这次宏定义巨多，然后因为协作，宏定义看起来也比较乱，找起来也有一点点麻烦。我认为可以将
与结构体赋值有关的宏定义，和结构体本身的声明集成到一起。

然后我们也可以在模块设计中适当使用参数。如果一些宏，只在一个模块中使用那么我们就可以使用参数来替代宏的作用。
一定程度上减少不必要的宏的数量。